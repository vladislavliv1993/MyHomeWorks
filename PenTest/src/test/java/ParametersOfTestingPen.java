import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.platform.commons.util.StringUtils;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class ParametersOfTestingPen {



    protected static Stream<Arguments> providePensForPenDoesntWrite() {
        Pen firstPen = new Pen(-100, 10.0);
        Pen secondPen = new Pen(0, 10.0);
        Pen thirdPen = new Pen(10, 100.0);

        String wordToWrite = "word";
        String expectedNote = "";

        return Stream.of(
                Arguments.of(firstPen, wordToWrite, expectedNote),
                Arguments.of(secondPen, wordToWrite, expectedNote),
                Arguments.of(thirdPen, wordToWrite, expectedNote)
        );
    }

    protected static Stream<Arguments> providePensForWriteSomethingTest(){
        Pen firstPen = new Pen(100, 10.0);
        Pen secondPen = new Pen(100, 10.0);
        Pen thirdPen = new Pen(100, 10.0);

        String firstWord = "Vlad"; //4 буквы
        String secondWord = "Vladislavl"; // 10 букв
        String thirdWord = "Vladislavli"; // 11 букв

        return Stream.of(
                Arguments.of(firstPen, firstWord),
                Arguments.of(secondPen, secondWord),
                Arguments.of(thirdPen, thirdWord)
        );
    }

    protected static Stream<Arguments> providePensForDoesItWorkTest(){
        Pen firstPen = new Pen(-100, 10.0);
        Pen secondPen = new Pen(0, 10.0);
        Pen thirdPen = new Pen(100, 10.0);

        return Stream.of(
                Arguments.of(firstPen),
                Arguments.of(secondPen),
                Arguments.of(thirdPen)
        );
    }

    protected static Stream<Arguments> providePensForCanWeWriteThisSize(){
        Pen firstPen = new Pen(100, -10.0);
        Pen secondPen = new Pen(100, 0.0);
        Pen thirdPen = new Pen(100, 10.0);
        Pen fourthPen = new Pen(100, 100.0);
        Pen fifthPen = new Pen(100, 1000.0);

        String firstActualNote = firstPen.write("V");
        String secondActualNote = firstPen.write("V");
        String thirdActualNote = firstPen.write("V");
        String fourthActualNote = firstPen.write("V");
        String fifthActualNote = firstPen.write("V");

        String expectedNote = "V";

        return Stream.of(
                Arguments.of(firstActualNote, expectedNote),
                Arguments.of(secondActualNote, expectedNote),
                Arguments.of(thirdActualNote, expectedNote),
                Arguments.of(fourthActualNote, expectedNote),
                Arguments.of(fifthActualNote, expectedNote)
        );
    }


}



