import org.junit.Assert;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.lang.reflect.Field;
import java.util.stream.Stream;


public class TestingPen extends ParametersOfTestingPen {

    public static Stream<Arguments> providePensForRedTest() {
        Pen firstErichPen = new Pen(1000, 10.0, "RED");
        Pen secondErichPen = new Pen(1000, 10.0, "GREEN");
        Pen thirdErichPen = new Pen(1000, 10.0, "BLUE");

        String firstColor = firstErichPen.getColor();
        String secondColor = secondErichPen.getColor();
        String thirdColor = thirdErichPen.getColor();
        String expectedColor = "RED";

        return Stream.of(
                Arguments.of(firstColor, expectedColor),
                Arguments.of(secondColor, expectedColor),
                Arguments.of(thirdColor, expectedColor)
        );
    }

    @ParameterizedTest
    @MethodSource("providePensForRedTest")
    public void PensAreRed(String actualColor, String expectedColor) {
        Assertions.assertEquals(actualColor, expectedColor);
    }

    @Test
    public void writePartOfWord(){
        Pen pen = new Pen(100, 10.0);
        pen.write("123456");
        String actualWord = pen.write("Vladislav"); //  БАГ если чернил не хватает - ручка не пишет вообще ничего
        String expectedWord = "Vlad";
        Assert.assertEquals(actualWord, expectedWord);
    }

    @ParameterizedTest
    @MethodSource("providePensForWriteSomethingTest")
    void writeSomth(Pen pen, String word){
        Assert.assertTrue(pen.write(word), true);
    }

    @ParameterizedTest
    @MethodSource("providePensForPenDoesntWrite")
    public void testCheckThatPenDoesNotWriteWhenNotEnoughInk(
            Pen pen, String wordToWrite, String expectedNote){
        String actualNote = pen.write(wordToWrite);
        Assertions.assertEquals(actualNote, expectedNote);
    }

    @ParameterizedTest
    @MethodSource("providePensForDoesItWorkTest")
    void DoesItWorkTest(Pen pen) {
        Assert.assertTrue(pen.isWork());
    }


    @ParameterizedTest
    @MethodSource("providePensForCanWeWriteThisSize")
    void CanWeWriteThisSize(String actual, String expected) {
        Assert.assertEquals(actual, expected);
    }

    //при тестировании ручки с отрицательным и нулевым значением контейнера тесты проходят штатно
    //при тестировании ручки с + значением контейнера, но с очень высоким размером буквы - тест падает
    //такой же параметризированный тест падает весь и не дает никаких наглядных результатов. НЕ ПОНЯТНО ПОЧЕМУ!!!
    // речь о public void penDoesntWrite
    //возможно ручка работает, ведь она не пуста. Просто не может написать желаемое!!!!!!!!
    @Test
    public void work(){
        Pen emptyPen = new Pen(10, 100.0);
        String actual = emptyPen.write("Vlad");
        String expexted = "";
        Assertions.assertEquals(actual, expexted);
    }

    @Test
    public void compareInkContainerValues() throws NoSuchFieldException, IllegalAccessException {
        Pen exPen = new Pen(100, 10.0, "RED");

        Field fieldWithInkContainer = exPen.getClass().getDeclaredField("inkContainerValue");
        fieldWithInkContainer.setAccessible(true);

        Field fieldWithSizeLetter = exPen.getClass().getDeclaredField("sizeLetter");
        fieldWithSizeLetter.setAccessible(true);

        Field fieldWithColor = exPen.getClass().getDeclaredField("color");
        fieldWithColor.setAccessible(true);

        int actualInkContainerValue = fieldWithInkContainer.getInt(exPen);
        int expectedInkContainerValue = 100;

        double actualSizeLetter = fieldWithSizeLetter.getDouble(exPen);
        double expectedSizeLetter = 10.0;

        String actualColor = (String) fieldWithColor.get(exPen);
        String expectedColor = "RED";

        Assertions.assertEquals(actualInkContainerValue, expectedInkContainerValue);
        Assertions.assertEquals(actualSizeLetter, expectedSizeLetter);
        Assertions.assertEquals(actualColor, expectedColor);
    }
}
